{"version":3,"sources":["App.js","images/cardano-logo-1024x1024.png","index.js"],"names":["animationFrameId","canvasColor","pulseCount","App","useState","dataPoints","setDataPoints","canvasRef","useRef","useEffect","interval","setInterval","fetch","then","response","a","json","symbol","price","prev","length","shift","Number","toFixed","timestamp","Date","now","catch","error","console","clearInterval","canvas","current","ctx","getContext","width","window","innerWidth","height","innerHeight","strokeStyle","fillStyle","draw","maxPrice","minPrice","forEach","pulseRadius","Math","sin","getX","index","getY","abs","clearRect","beginPath","arc","PI","fill","i","moveTo","lineTo","stroke","requestAnimationFrame","cancelAnimationFrame","className","src","logo","alt","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qJAOIA,E,6ECPW,MAA0B,mD,ODInCC,EAAc,UAIhBC,EAAa,EAwHFC,MAtHf,WACE,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAYC,iBAAO,MAuGzB,OArGAC,qBAAU,WAER,IAAMC,EAAWC,aACf,kBACEC,MAAM,sDAAD,OAfE,YAgBJC,KADH,uCACQ,WAAOC,GAAP,mBAAAC,EAAA,sEAC0BD,EAASE,OADnC,gBACGC,EADH,EACGA,OAAQC,EADX,EACWA,MAGfZ,GAAc,SAACa,GACb,KAAOA,EAAKC,QAnBT,KAmB6BD,EAAKE,QACrC,MAAM,GAAN,mBACKF,GADL,CAEE,CAACF,SAAQC,MAAOI,OAAOA,OAAOJ,GAAOK,QAAQ,IAAKC,UAAWC,KAAKC,YARlE,2CADR,uDAaGC,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,QACpC,KAEF,OAAO,kBAAME,cAAcpB,MAC1B,IAEHD,qBAAU,WACR,IAAMsB,EAASxB,EAAUyB,QACnBC,EAAMF,EAAOG,WAAW,MAI9BH,EAAOI,MAAQC,OAAOC,WAAa,IACnCN,EAAOO,OAASF,OAAOG,YAAc,IAIrCN,EAAIO,YAAcvC,EAClBgC,EAAIQ,UAAYxC,IAGf,CAACmC,OAAOC,WAAYD,OAAOG,cAE9B9B,qBAAU,WACR,IAAMsB,EAASxB,EAAUyB,QACnBC,EAAMF,EAAOG,WAAW,MAsD9B,OApDa,SAAPQ,IACJxC,IACA,IAAIyC,EAAW,EACXC,EAAW,EAGfvC,EAAWwC,SAAQ,YAAc,IAAZ3B,EAAW,EAAXA,MACfA,EAAQyB,EACVA,EAAWzB,GACFA,EAAQ0B,GAAyB,IAAbA,KAC7BA,EAAW1B,MAKf,IAAM4B,EAAc,WAAIC,KAAKC,IAAiB,IAAb9C,GAAsB,GACjD+C,EAAO,SAACC,GAAD,OAAYnB,EAAOI,MArErB,IAqEyCe,GAC9CC,EAAO,SAACjC,GAAD,OACX6B,KAAKK,IAAKrB,EAAOO,QAAUK,EAAWC,IAAc1B,EAAQ0B,GAAYb,EAAOO,SAGjFL,EAAIoB,UAAU,EAAG,EAAGpB,EAAIF,OAAOI,MAAOF,EAAIF,OAAOO,QACjDL,EAAIqB,YACJrB,EAAIsB,IACFlD,EAAWe,QAAUW,EAAOI,MACxBc,EAAKlB,EAAOI,MAAQW,GACpBzC,EAAWe,OACX6B,EAAK5C,EAAWe,OAAS,GACzB6B,EAAK,GACT5C,EAAWe,OAAS+B,EAAK9C,EAAWA,EAAWe,OAAS,GAAGF,OAASiC,EAAK,GACzEL,EACA,EACA,EAAIC,KAAKS,IAEXvB,EAAIwB,OAGJxB,EAAIqB,YACJjD,EAAWwC,SAAQ,WAAUa,GAAO,IAAfxC,EAAc,EAAdA,MACT,IAANwC,EACFzB,EAAI0B,OAAOV,EAAKS,GAAIP,EAAKjC,IAEzBe,EAAI2B,OAAOX,EAAKS,GAAIP,EAAKjC,OAG7Be,EAAI4B,SAEJ7D,EAAmBoC,OAAO0B,sBAAsBpB,GAGlDA,GAEO,WACLN,OAAO2B,qBAAqB/D,MAE7B,CAACK,IAGF,sBAAK2D,UAAU,eAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBAAKC,IAAKC,EAAMC,IAAI,OAAOH,UAAU,SACrC,uBAAMA,UAAU,QAAhB,cACI3D,EAAWe,OAASf,EAAWA,EAAWe,OAAS,GAAGF,MAAQ,QAGpE,wBAAQkD,IAAK7D,QEtHnB8D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.76d3f401.chunk.js","sourcesContent":["import {useEffect, useRef, useState} from 'react'\nimport logo from './images/cardano-logo-1024x1024.png'\n\nconst ticker = 'ADABUSD'\nconst canvasColor = '#3564f6'\nconst maxQueue = 100\n\nlet animationFrameId\nlet pulseCount = 0\n\nfunction App() {\n  const [dataPoints, setDataPoints] = useState([])\n  const canvasRef = useRef(null)\n\n  useEffect(() => {\n    // get price data on an interval basis (every 1 second)\n    const interval = setInterval(\n      () =>\n        fetch(`https://www.binance.com/api/v3/ticker/price?symbol=${ticker}`)\n          .then(async (response) => {\n            const {symbol, price} = await response.json()\n            // add the price (and some extra data) to the state array,\n            // whilst making sure the queue length doesn't exceed the allowed number (see variable \"maxQueue\")\n            setDataPoints((prev) => {\n              while (prev.length >= maxQueue) prev.shift()\n              return [\n                ...prev,\n                {symbol, price: Number(Number(price).toFixed(4)), timestamp: Date.now()},\n              ]\n            })\n          })\n          .catch((error) => console.error(error)),\n      1000,\n    )\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n\n    // set width and height according to screen size.\n    // this is also applied when the screen size changes\n    canvas.width = window.innerWidth - 100\n    canvas.height = window.innerHeight - 420\n\n    // set colors of canvas items.\n    // basically required on-mount, but it won't hurt performance by applying this on window-size-change\n    ctx.strokeStyle = canvasColor\n    ctx.fillStyle = canvasColor\n\n    // eslint-disable-next-line\n  }, [window.innerWidth, window.innerHeight])\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n\n    const draw = () => {\n      pulseCount++\n      let maxPrice = 0\n      let minPrice = 0\n\n      // find the highest price, and lowest price in the current queue\n      dataPoints.forEach(({price}) => {\n        if (price > maxPrice) {\n          maxPrice = price\n        } else if (price < minPrice || minPrice === 0) {\n          minPrice = price\n        }\n      })\n\n      // generic calculators to get the X and Y positions for each data point\n      const pulseRadius = 7 * Math.sin(pulseCount * 0.05) ** 2\n      const getX = (index) => (canvas.width / maxQueue) * index\n      const getY = (price) =>\n        Math.abs((canvas.height / (maxPrice - minPrice)) * (price - minPrice) - canvas.height)\n\n      // draw the pulse dot\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n      ctx.beginPath()\n      ctx.arc(\n        dataPoints.length >= canvas.width\n          ? getX(canvas.width - pulseRadius)\n          : dataPoints.length\n          ? getX(dataPoints.length - 1)\n          : getX(0),\n        dataPoints.length ? getY(dataPoints[dataPoints.length - 1].price) : getY(0),\n        pulseRadius,\n        0,\n        2 * Math.PI,\n      )\n      ctx.fill()\n\n      // draw the graph lines\n      ctx.beginPath()\n      dataPoints.forEach(({price}, i) => {\n        if (i === 0) {\n          ctx.moveTo(getX(i), getY(price))\n        } else {\n          ctx.lineTo(getX(i), getY(price))\n        }\n      })\n      ctx.stroke()\n\n      animationFrameId = window.requestAnimationFrame(draw)\n    }\n\n    draw()\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId)\n    }\n  }, [dataPoints])\n\n  return (\n    <div className='app flex-col'>\n      <header className='ticker flex-col'>\n        <img src={logo} alt='logo' className='logo' />\n        <span className='price'>\n          ${dataPoints.length ? dataPoints[dataPoints.length - 1].price : 0}\n        </span>\n      </header>\n      <canvas ref={canvasRef} />\n    </div>\n  )\n}\n\nexport default App\n","export default __webpack_public_path__ + \"static/media/cardano-logo-1024x1024.a528433f.png\";","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}