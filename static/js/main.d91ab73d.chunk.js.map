{"version":3,"sources":["components/PulseCanvas.js","images/cardano-logo-1024x1024.png","App.js","index.js"],"names":["PulseCanvas","dataPoints","maxPoints","color","canvasRef","useRef","animationFrameId","pulseCount","useEffect","canvas","current","width","window","innerWidth","height","innerHeight","context","getContext","strokeStyle","fillStyle","draw","maxPrice","minPrice","forEach","price","pulseRadius","Math","sin","getX","index","getY","abs","clearRect","beginPath","arc","length","PI","fill","i","moveTo","lineTo","stroke","requestAnimationFrame","cancelAnimationFrame","ref","App","useState","setDataPoints","interval","setInterval","fetch","then","response","a","json","prev","shift","Number","toFixed","timestamp","Date","now","catch","error","console","clearInterval","className","src","logo","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d91ab73d.chunk.js","sourcesContent":["import {useEffect, useRef} from 'react'\n\nfunction PulseCanvas({dataPoints, maxPoints, color}) {\n  const canvasRef = useRef(null)\n  const animationFrameId = useRef(0)\n  const pulseCount = useRef(0)\n\n  useEffect(() => {\n    // set width and height according to screen size.\n    // this is also applied when the screen size changes\n    const canvas = canvasRef.current\n    canvas.width = window.innerWidth - 100\n    canvas.height = window.innerHeight - 420\n\n    // set colors of canvas items.\n    // basically required only once, but it won't hurt performance by applying this again when this useEffect is called\n    const context = canvas.getContext('2d')\n    context.strokeStyle = color\n    context.fillStyle = color\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [window.innerWidth, window.innerHeight, color])\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n\n    // the animation draw function, creates the visuals on the canvas\n    const draw = () => {\n      pulseCount.current++\n      let maxPrice = 0\n      let minPrice = 0\n\n      // find the highest price, and lowest price in the current queue\n      dataPoints.forEach(({price}) => {\n        if (price > maxPrice) {\n          maxPrice = price\n        } else if (price < minPrice || minPrice === 0) {\n          minPrice = price\n        }\n      })\n\n      // generic calculators to get the X and Y positions for each dataPoints point\n      const pulseRadius = 7 * Math.sin(pulseCount.current * 0.05) ** 2\n      const getX = (index) => (canvas.width / maxPoints) * index\n      const getY = (price) =>\n        Math.abs((canvas.height / (maxPrice - minPrice)) * (price - minPrice) - canvas.height)\n\n      // draw the pulse dot\n      context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n      context.beginPath()\n      context.arc(\n        dataPoints.length >= canvas.width\n          ? getX(canvas.width - pulseRadius)\n          : dataPoints.length\n          ? getX(dataPoints.length - 1)\n          : getX(0),\n        dataPoints.length ? getY(dataPoints[dataPoints.length - 1].price) : getY(0),\n        pulseRadius,\n        0,\n        2 * Math.PI,\n      )\n      context.fill()\n\n      // draw the graph lines\n      context.beginPath()\n      dataPoints.forEach(({price}, i) => {\n        if (i === 0) {\n          context.moveTo(getX(i), getY(price))\n        } else {\n          context.lineTo(getX(i), getY(price))\n        }\n      })\n      context.stroke()\n\n      animationFrameId.current = window.requestAnimationFrame(draw)\n    }\n\n    draw()\n    return () => {\n      window.cancelAnimationFrame(animationFrameId.current)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dataPoints, maxPoints])\n\n  return <canvas ref={canvasRef} />\n}\n\nexport default PulseCanvas\n","export default __webpack_public_path__ + \"static/media/cardano-logo-1024x1024.a528433f.png\";","import {useEffect, useState} from 'react'\nimport PulseCanvas from './components/PulseCanvas'\nimport logo from './images/cardano-logo-1024x1024.png'\n\nconst ticker = 'ADABUSD'\nconst canvasColor = '#3564f6'\nconst maxQueue = 100\n\nfunction App() {\n  const [dataPoints, setDataPoints] = useState([])\n\n  useEffect(() => {\n    // get price data on an interval basis (every 1 second)\n    const interval = setInterval(\n      () =>\n        fetch(`https://www.binance.com/api/v3/ticker/price?symbol=${ticker}`)\n          .then(async (response) => {\n            const {price} = await response.json()\n            // add the price (and some extra data) to the state array,\n            // whilst making sure the queue length doesn't exceed the allowed number (see variable \"maxQueue\")\n            setDataPoints((prev) => {\n              while (prev.length >= maxQueue) prev.shift()\n              return [...prev, {price: Number(Number(price).toFixed(4)), timestamp: Date.now()}]\n            })\n          })\n          .catch((error) => console.error(error)),\n      1000,\n    )\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [])\n\n  return (\n    <div className='app flex-col'>\n      <header className='ticker flex-col'>\n        <img src={logo} alt='logo' className='logo' />\n        <span className='price'>\n          ${dataPoints.length ? dataPoints[dataPoints.length - 1].price : 0}\n        </span>\n      </header>\n      <PulseCanvas dataPoints={dataPoints} maxPoints={maxQueue} color={canvasColor} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}